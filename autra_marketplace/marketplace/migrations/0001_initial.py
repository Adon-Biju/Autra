# Generated by Django 5.0.1 on 2025-09-11 19:33

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Agent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name of your AI agent', max_length=200)),
                ('slug', models.SlugField(help_text='URL-friendly version of name', max_length=255, unique=True)),
                ('description', models.TextField(help_text='Detailed description of what your agent does')),
                ('short_description', models.CharField(help_text='Brief description for listings', max_length=500)),
                ('category', models.CharField(choices=[('customer_service', 'Customer Service'), ('data_analysis', 'Data Analysis'), ('content_creation', 'Content Creation'), ('automation', 'Process Automation'), ('sales', 'Sales & Marketing'), ('coding', 'Coding & Development'), ('research', 'Research & Analysis'), ('education', 'Education & Training'), ('other', 'Other')], db_index=True, max_length=50)),
                ('tags', models.JSONField(blank=True, default=list, help_text='Tags like ["GPT-4", "Python", "API"]')),
                ('pricing_model', models.CharField(choices=[('one_time', 'One-time Purchase'), ('monthly', 'Monthly Subscription'), ('annual', 'Annual Subscription'), ('usage', 'Pay Per Use'), ('freemium', 'Freemium'), ('custom', 'Custom Pricing')], max_length=20)),
                ('price', models.DecimalField(decimal_places=2, help_text='Price in GBP', max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('usage_price', models.DecimalField(blank=True, decimal_places=4, help_text='Price per API call (for usage-based pricing)', max_digits=10, null=True)),
                ('free_tier_limit', models.IntegerField(default=0, help_text='Free API calls per month (0 = no free tier)')),
                ('api_endpoint', models.URLField(blank=True, help_text="Your agent's API endpoint")),
                ('documentation_url', models.URLField(blank=True, help_text='Link to technical documentation')),
                ('github_url', models.URLField(blank=True, help_text='GitHub repository (if open source)')),
                ('integration_type', models.CharField(choices=[('api', 'REST API'), ('webhook', 'Webhook'), ('sdk', 'SDK/Library'), ('plugin', 'Plugin'), ('standalone', 'Standalone App')], default='api', max_length=20)),
                ('requirements', models.JSONField(blank=True, default=dict, help_text='{"min_ram": "4GB", "python": "3.8+", "dependencies": ["numpy", "pandas"]}')),
                ('sandbox_available', models.BooleanField(default=False, help_text='Is a sandbox environment available for testing?')),
                ('sandbox_url', models.URLField(blank=True, help_text='Sandbox API endpoint for testing')),
                ('demo_url', models.URLField(blank=True, help_text='Live demo URL')),
                ('test_api_key', models.CharField(blank=True, help_text='Public test API key for sandbox', max_length=255)),
                ('risk_rating', models.IntegerField(default=3, help_text='1=Very Safe, 5=High Risk', validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('tested_by_platform', models.BooleanField(default=False, help_text='Has Autra tested and verified this agent?')),
                ('security_audit_date', models.DateField(blank=True, help_text='Last security audit date', null=True)),
                ('compliance_certifications', models.JSONField(blank=True, default=list, help_text='["GDPR", "HIPAA", "SOC2"]')),
                ('average_response_time', models.FloatField(blank=True, help_text='Average response time in seconds', null=True)),
                ('uptime_percentage', models.DecimalField(decimal_places=2, default=99.9, max_digits=5, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('rate_limit', models.IntegerField(default=1000, help_text='API calls per hour limit')),
                ('times_hired', models.IntegerField(default=0)),
                ('total_api_calls', models.BigIntegerField(default=0)),
                ('active_subscriptions', models.IntegerField(default=0)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(5)])),
                ('total_reviews', models.IntegerField(default=0)),
                ('logo', models.ImageField(blank=True, help_text='Agent logo or icon', upload_to='agent_logos/')),
                ('screenshots', models.JSONField(blank=True, default=list, help_text='List of screenshot URLs')),
                ('video_url', models.URLField(blank=True, help_text='Demo video URL (YouTube, Vimeo, etc.)')),
                ('is_active', models.BooleanField(default=True, help_text='Is this agent currently available?')),
                ('is_featured', models.BooleanField(default=False, help_text='Feature on homepage?')),
                ('is_verified', models.BooleanField(default=False, help_text='Verified by Autra team?')),
                ('under_review', models.BooleanField(default=True, help_text='Pending platform review?')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('published_at', models.DateTimeField(blank=True, help_text='When the agent went live', null=True)),
                ('developer', models.ForeignKey(limit_choices_to={'user_type': 'developer'}, on_delete=django.db.models.deletion.CASCADE, related_name='agents', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='AgentVersion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('version_number', models.CharField(help_text='e.g., 1.0.0, 2.1.3', max_length=20)),
                ('changelog', models.TextField(help_text='What changed in this version')),
                ('is_stable', models.BooleanField(default=True)),
                ('release_date', models.DateTimeField(auto_now_add=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='versions', to='marketplace.agent')),
            ],
            options={
                'ordering': ['-release_date'],
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rating', models.IntegerField(validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('title', models.CharField(max_length=200)),
                ('comment', models.TextField()),
                ('ease_of_use', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('reliability', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('support', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('value_for_money', models.IntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(5)])),
                ('verified_purchase', models.BooleanField(default=False)),
                ('helpful_count', models.IntegerField(default=0)),
                ('reported', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='marketplace.agent')),
                ('reviewer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews_written', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-helpful_count', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Transaction',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('platform_fee', models.DecimalField(decimal_places=2, help_text="Autra's commission", max_digits=10)),
                ('seller_earning', models.DecimalField(decimal_places=2, help_text='Amount seller receives', max_digits=10)),
                ('transaction_type', models.CharField(choices=[('purchase', 'One-time Purchase'), ('subscription_start', 'Subscription Started'), ('subscription_renewal', 'Subscription Renewal'), ('usage', 'Usage-based Payment'), ('refund', 'Refund')], max_length=25)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processing', 'Processing'), ('completed', 'Completed'), ('failed', 'Failed'), ('refunded', 'Refunded')], default='pending', max_length=20)),
                ('stripe_payment_intent', models.CharField(blank=True, max_length=255)),
                ('stripe_subscription_id', models.CharField(blank=True, max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('agent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='transactions', to='marketplace.agent')),
                ('buyer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='purchases', to=settings.AUTH_USER_MODEL)),
                ('seller', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sales', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='agent',
            index=models.Index(fields=['category', 'is_active'], name='marketplace_categor_338d59_idx'),
        ),
        migrations.AddIndex(
            model_name='agent',
            index=models.Index(fields=['developer', 'is_active'], name='marketplace_develop_0014fb_idx'),
        ),
        migrations.AddIndex(
            model_name='agent',
            index=models.Index(fields=['average_rating', '-times_hired'], name='marketplace_average_92068a_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='agentversion',
            unique_together={('agent', 'version_number')},
        ),
        migrations.AlterUniqueTogether(
            name='review',
            unique_together={('agent', 'reviewer')},
        ),
    ]
